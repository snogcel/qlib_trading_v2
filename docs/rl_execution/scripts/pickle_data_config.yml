env:
  concurrency: 1
  parallel_mode: dummy
# start & end time for training/validation/test datasets
start_time: !!str &start 2018-08-02
end_time: !!str &end 2025-04-01
train_end_time: !!str &tend 2023-12-31
valid_start_time: !!str &vstart 2024-01-01
valid_end_time: !!str &vend 2024-09-30
test_start_time: !!str &tstart 2024-10-01
# the instrument set
instruments: &ins ["BTCUSDT","BTC_FEAT"]
# qlib related configuration
qlib_conf:
    provider_uri: 
        60min: /Projects/qlib_trading_v2/qlib_data/CRYPTO # path to generated qlib bin    
        day: /Projects/qlib_trading_v2/qlib_data/CRYPTO # path to generated qlib bin    
    redis_port: 233
feature_conf:
    path: ./data3/pickle/feature.pkl # output path of feature
    class: DatasetH
    module_path: qlib.data.dataset
    kwargs:
        handler:
            class: CryptoHighFreqGeneralHandler
            module_path: qlib_custom.custom_data_handler
            kwargs:
                instruments: *ins
                start_time: *start
                end_time: *end
                fit_start_time: *start
                fit_end_time: *tend
                process_type: append
                drop_raw: False
                day_length: 1440 # how many minutes in one trading day
                columns: ["$open", "$high", "$low", "$close"]
                freq: 60min                
                data_loader:
                    class: CustomNestedDataLoader
                    module_path: qlib_custom.custom_ndl
                    join: left
                    dataloader_l: 
                    - class: QlibDataLoader
                      module_path: qlib.data.dataset.loader                       
                      kwargs:
                        config: 
                            feature: CryptoHighFreqGeneralHandler.get_feature_config()
                        freq: 60min
                        inst_processors: []
                        instruments: ['BTCUSDT']
                        start_time: *start
                        end_time: *end
                    # - class: gdelt_dataloader
                    #   module_path: qlib_custom.gdelt_loader                      
                    #   kwargs:
                    #     config:
                    #         feature: gdelt_dataloader.get_feature_config()
                    #     freq: day
                    #     inst_processors: []                                
                    #     instruments: ['BTC_FEAT']
                    #     start_time: *start
                    #     end_time: *end
                    - class: MacroFeatureLoader
                      module_path: qlib_custom.macro_loader                      
                      kwargs:
                        pickle_path: ./data/macro_features.pkl
                        freq: day
                        swap_level: False
                        inst_processors: []                                
                infer_processors:
                - class: HighFreqNorm
                  module_path: qlib.contrib.data.highfreq_processor
                  kwargs:
                    fit_start_time: *start
                    fit_end_time: *tend
                    feature_save_dir: ./stat/  #  output path of statistics of features (for feature normalization)
                    norm_groups: 
                        price: 8
                        volume: 2
                inst_processors:
                - class: TimeRangeFlt
                  module_path: qlib.data.dataset.processor
                  kwargs:
                    start_time: *start
                    end_time: *end
                    freq: 60min
        segments:
            train: !!python/tuple [*start, *tend]
            valid: !!python/tuple [*vstart, *vend]
            test: !!python/tuple [*tstart, *end]
backtest_conf:
    path: ./data3/pickle/backtest.pkl # output path of backtest
    class: DatasetH
    module_path: qlib.data.dataset
    kwargs:
        handler:
            class: CryptoHighFreqGeneralBacktestHandler
            module_path: qlib_custom.custom_data_handler
            kwargs:
                start_time: *start
                end_time: *end
                instruments: *ins
                day_length: 1440
                freq: 60min
                columns: ["$close", "$volume"] # sends variable through price norming functions
                inst_processors:
                - class: TimeRangeFlt
                  module_path: qlib.data.dataset.processor
                  kwargs:
                    start_time: "2018-08-02"
                    end_time: "2025-04-01"
                    freq: 60min
        segments:
            train: !!python/tuple [*start, *tend]
            valid: !!python/tuple [*vstart, *vend]
            test: !!python/tuple [*tstart, *end]
freq: 60min
